import React, { useContext, useState, useEffect } from "react";
import {
    View, Text, FlatList, Image, TouchableOpacity, StyleSheet, ActivityIndicator, Alert, Modal, TextInput, ScrollView
} from "react-native";
import { CartContext } from "../context/CartContext";
import { AuthContext } from "../context/AuthContext";
import { useStripe } from "@stripe/stripe-react-native";
import { useNotification } from "../context/NotificationContext";

export default function Cart() {
    const { addNotification } = useNotification();
    const { cart, removeFromCart, updateQuantity, totalPrice } = useContext(CartContext);
    const { user } = useContext(AuthContext);
    const [loading, setLoading] = useState(false);
    const { initPaymentSheet, presentPaymentSheet } = useStripe();
    const [selectedAddress, setSelectedAddress] = useState(user?.addresses?.[0] || "");
    const [modalVisible, setModalVisible] = useState(false);
    const [addresses, setAddresses] = useState(user?.addresses || []);
    const [newAddress, setNewAddress] = useState("");
    const [upsellProducts] = useState([
        { id: 1, name: "Chocolate Cake", price: 5, photo: "https://via.placeholder.com/50" },
        { id: 2, name: "French Fries", price: 3, photo: "https://via.placeholder.com/50" },
        { id: 1, name: "Chocolate Cake", price: 5, photo: "https://via.placeholder.com/50" },
        { id: 2, name: "French Fries", price: 3, photo: "https://via.placeholder.com/50" },
        { id: 1, name: "Chocolate Cake", price: 5, photo: "https://via.placeholder.com/50" },
        { id: 2, name: "French Fries", price: 3, photo: "https://via.placeholder.com/50" },
    ]);

    const checkInventory = (productId) => {
        const inventory = { 1: 10, 2: 5, 3: 2 };
        return inventory[productId] || 0;
    };

    const fetchPaymentIntent = async () => {
        try {
            const response = await fetch("https://your-backend.com/api/create-payment-intent", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    amount: totalPrice * 100,  // Convert to cents
                    currency: "usd",
                    userId: user?.id || "guest",
                }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || "Failed to create PaymentIntent");
            }

            return data.clientSecret; // Return the client secret
        } catch (error) {
            Alert.alert("Error", error.message);
            return null;
        }
    };

    const initializePaymentSheet = async () => {
        // if (!user) {
        //     Alert.alert("Error", "User not logged in!");
        //     return;
        // }
        // if (cart.length === 0) {
        //     Alert.alert("Cart Empty", "Please add items to the cart before ordering.");
        //     return;
        // }
        submitOrder();
        // try {
        //     setLoading(true);

        //     const clientSecret = await fetchPaymentIntent();
        //     if (!clientSecret) {
        //         setLoading(false);
        //         return;
        //     }

        //     const { error } = await initPaymentSheet({
        //         paymentIntentClientSecret: clientSecret,
        //         merchantDisplayName: "FOOD APP",
        //         allowsDelayedPaymentMethods: false,
        //     });

        //     if (error) {
        //         Alert.alert("Error", error.message);
        //         setLoading(false);
        //         return;
        //     }

        //     setLoading(false);
        //     openPaymentSheet();
        // } catch (error) {
        //     setLoading(false);
        //     Alert.alert("Error", "Failed to initialize payment.");
        // }
    };

    const openPaymentSheet = async () => {
        const { error } = await presentPaymentSheet();

        if (error) {
            Alert.alert("Payment Failed", error.message);
        } else {
            Alert.alert("Success", "Your order has been placed!");
            
        }
    };

    const addNewAddress = () => {
        if (!newAddress.trim()) return Alert.alert("Error", "Address cannot be empty.");
        setAddresses([...addresses, newAddress]);
        setSelectedAddress(newAddress);
        setNewAddress("");
        setModalVisible(false);
    };

    // Function to submit the order
    const submitOrder = async () => {

        setTimeout(() => {
            addNotification(
                "Cart Expiry Notice",
                "Your cart will expire in 5 minutes. Please complete your order to avoid losing items."
            );
        }, 10 * 60 * 1000); // 10 minutes

        // try {
        //     const orderPayload = {
        //         userid: user?.id.toString(),
        //         orderdetails: cart.map(item => ({
        //             item_name: item.name,
        //             item_price: item.price,
        //             item_qty: item.quantity,
        //             item_image: item.photo
        //         }))
        //     };

        //     const response = await fetch("https://your-backend.com/api/ordersubmit", {
        //         method: "POST",
        //         headers: { "Content-Type": "application/json" },
        //         body: JSON.stringify(orderPayload),
        //     });

        //     const data = await response.json();

        //     if (response.ok) {
        //         Alert.alert("Success", "Order placed successfully!");
        //     } else {
        //         Alert.alert("Error", data.message || "Something went wrong!");
        //     }
        // } catch (error) {
        //     Alert.alert("Network Error", "Failed to connect to the server.");
        // }
    };

    useEffect(() => {
        if (cart.length === 0) return;

        // Notify after 10 minutes
        const notifyTimer = setTimeout(() => {
            addNotification(
                "Cart Expiry Warning",
                "Your cart will expire in 5 minutes. Complete your order to avoid losing items."
            );
        }, 10 * 60 * 1000);

        // Auto-clear cart after 15 minutes
        const clearCartTimer = setTimeout(() => {
            clearCart();
            Alert.alert("Cart Expired", "Your cart items have been removed due to inactivity.");
        }, 15 * 60 * 1000);

        return () => {
            clearTimeout(notifyTimer);
            clearTimeout(clearCartTimer);
        };
    }, [cart]);

    return (
        <View style={styles.container}>
            <Text style={styles.title}>Shopping Cart</Text>

            {cart.length === 0 ? (
                <Text style={styles.emptyCart}>Your cart is empty.</Text>
            ) : (
                <>
                    <FlatList
                        data={cart}
                        keyExtractor={(item) => item.id.toString()}
                        renderItem={({ item }) => (
                            <View style={styles.cartItem}>
                                <Image source={{ uri: item.photo }} style={styles.image} />
                                <View style={styles.info}>
                                    <Text style={styles.name}>{item.name}</Text>
                                    <Text style={styles.price}>${item.price} x {item.quantity}</Text>
                                    <Text style={styles.stock}>
                                        Stock: {checkInventory(item.id) > 0 ? checkInventory(item.id) : "Out of Stock"}
                                    </Text>
                                    <View style={styles.actions}>
                                        <TouchableOpacity onPress={() => updateQuantity(item.id, "decrease")} style={styles.button}>
                                            <Text style={styles.buttonText}>-</Text>
                                        </TouchableOpacity>
                                        <Text style={styles.quantity}>{item.quantity}</Text>
                                        <TouchableOpacity onPress={() => updateQuantity(item.id, "increase")} style={styles.button}>
                                            <Text style={styles.buttonText}>+</Text>
                                        </TouchableOpacity>
                                        <TouchableOpacity onPress={() => removeFromCart(item.id)} style={styles.deleteButton}>
                                            <Text style={styles.deleteText}>Remove</Text>
                                        </TouchableOpacity>
                                    </View>
                                </View>
                            </View>
                        )}
                    />

                    {/* Upselling Products  */}
                     <Text style={styles.upsellTitle}>You May Also Like</Text>
                    <FlatList
                        horizontal
                        data={upsellProducts}
                        keyExtractor={(item) => item.id.toString()}
                        renderItem={({ item }) => (
                            <View style={styles.upsellItem}>
                                <Image source={{ uri: item.photo }} style={styles.upsellImage} />
                                <Text style={styles.upsellName}>{item.name}</Text>
                                <Text style={styles.upsellPrice}>${item.price}</Text>
                            </View>
                        )}
                    />

                    {/* Address Selection */}
                    <View style={styles.addressContainer}>
                        <Text style={styles.addressTitle}>Delivery Address</Text>
                        <TouchableOpacity onPress={() => setModalVisible(true)} style={styles.addressButton}>
                            <Text style={styles.addressText}>{selectedAddress || "Select Address"}</Text>
                        </TouchableOpacity>
                    </View>

                    {/* Cart Total */}
                    <View style={styles.totalContainer}>
                        <Text style={styles.totalText}>Total: ${totalPrice}</Text>
                        <TouchableOpacity style={styles.checkoutButton}>
                            <Text style={styles.checkoutText}>Proceed to Checkout</Text>
                        </TouchableOpacity>
                    </View>
                </>
            )}

            {/* Address Modal */}
            <Modal visible={modalVisible} animationType="slide" transparent={true}>
                <View style={styles.modalContainer}>
                    <View style={styles.modalContent}>
                        <Text style={styles.modalTitle}>Select or Add Address</Text>
                        <ScrollView>
                            {addresses.map((item, index) => (
                                <TouchableOpacity
                                    key={index}
                                    style={[styles.addressOption, selectedAddress === item && styles.selectedAddress]}
                                    onPress={() => { setSelectedAddress(item); setModalVisible(false); }}>
                                    <Text style={styles.addressText}>{item}</Text>
                                </TouchableOpacity>
                            ))}
                        </ScrollView>
                        <TextInput
                            style={styles.input}
                            placeholder="Enter new address"
                            value={newAddress}
                            onChangeText={setNewAddress}
                        />
                        <TouchableOpacity onPress={addNewAddress} style={styles.addButton}>
                            <Text style={styles.addButtonText}>Add Address</Text>
                        </TouchableOpacity>
                        <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.closeButton}>
                            <Text style={styles.closeButtonText}>Close</Text>
                        </TouchableOpacity>
                    </View>
                </View>
            </Modal>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 16,
        backgroundColor: "#f8f9fa",
    },
    title: {
        fontSize: 24,
        fontWeight: "bold",
        textAlign: "center",
        marginBottom: 16,
    },
    emptyCart: {
        fontSize: 18,
        textAlign: "center",
        marginTop: 50,
        color: "#888",
    },
    cartItem: {
        flexDirection: "row",
        backgroundColor: "#fff",
        padding: 12,
        borderRadius: 8,
        marginBottom: 10,
        shadowColor: "#000",
        shadowOpacity: 0.1,
        shadowOffset: { width: 0, height: 2 },
        elevation: 2,
    },
    image: {
        width: 80,
        height: 80,
        borderRadius: 8,
        marginRight: 12,
    },
    info: {
        flex: 1,
        justifyContent: "center",
    },
    name: {
        fontSize: 16,
        fontWeight: "bold",
    },
    price: {
        fontSize: 14,
        color: "#333",
    },
    stock: {
        fontSize: 12,
        color: "#888",
        marginTop: 4,
    },
    actions: {
        flexDirection: "row",
        alignItems: "center",
        marginTop: 8,
    },
    button: {
        width: 32,
        height: 32,
        backgroundColor: "#007bff",
        alignItems: "center",
        justifyContent: "center",
        borderRadius: 4,
        marginHorizontal: 5,
    },
    buttonText: {
        color: "#fff",
        fontSize: 18,
    },
    quantity: {
        fontSize: 16,
        fontWeight: "bold",
    },
    deleteButton: {
        marginLeft: 12,
    },
    deleteText: {
        color: "red",
        fontSize: 14,
    },
    upsellTitle: {
        fontSize: 18,
        fontWeight: "bold",
        marginTop: 16,
        marginBottom: 8,
    },
    upsellItem: {
        alignItems: "center",
        padding: 10,
        backgroundColor: "#fff",
        borderRadius: 8,
        marginRight: 12,
        shadowColor: "#000",
        shadowOpacity: 0.1,
        shadowOffset: { width: 0, height: 2 },
        elevation: 2,
    },
    upsellImage: {
        width: 50,
        height: 50,
        borderRadius: 4,
        marginBottom: 6,
    },
    upsellName: {
        fontSize: 14,
        fontWeight: "bold",
    },
    upsellPrice: {
        fontSize: 12,
        color: "#333",
    },
    addressContainer: {
        marginTop: 20,
    },
    addressTitle: {
        fontSize: 18,
        fontWeight: "bold",
    },
    addressButton: {
        backgroundColor: "#007bff",
        padding: 12,
        borderRadius: 6,
        marginTop: 8,
        alignItems: "center",
    },
    addressText: {
        color: "#fff",
        fontSize: 16,
    },
    totalContainer: {
        marginTop: 20,
        padding: 12,
        backgroundColor: "#fff",
        borderRadius: 8,
        shadowColor: "#000",
        shadowOpacity: 0.1,
        shadowOffset: { width: 0, height: 2 },
        elevation: 2,
    },
    totalText: {
        fontSize: 18,
        fontWeight: "bold",
        textAlign: "center",
    },
    checkoutButton: {
        marginTop: 10,
        backgroundColor: "#28a745",
        padding: 12,
        borderRadius: 6,
        alignItems: "center",
    },
    checkoutText: {
        color: "#fff",
        fontSize: 16,
        fontWeight: "bold",
    },
    modalContainer: {
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        backgroundColor: "rgba(0,0,0,0.5)",
    },
    modalContent: {
        width: "80%",
        backgroundColor: "#fff",
        padding: 16,
        borderRadius: 8,
        elevation: 5,
    },
    modalTitle: {
        fontSize: 18,
        fontWeight: "bold",
        marginBottom: 10,
    },
    addressOption: {
        padding: 12,
        borderBottomWidth: 1,
        borderBottomColor: "#ccc",
    },
    selectedAddress: {
        backgroundColor: "#e3f2fd",
    },
    input: {
        borderWidth: 1,
        borderColor: "#ccc",
        borderRadius: 6,
        padding: 10,
        marginTop: 10,
    },
    addButton: {
        backgroundColor: "#007bff",
        padding: 12,
        borderRadius: 6,
        marginTop: 10,
        alignItems: "center",
    },
    addButtonText: {
        color: "#fff",
        fontSize: 16,
    },
    closeButton: {
        marginTop: 10,
        alignItems: "center",
    },
    closeButtonText: {
        color: "red",
        fontSize: 16,
    },
});
